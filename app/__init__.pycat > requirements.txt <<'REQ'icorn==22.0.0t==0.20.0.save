from flask import Flask, jsonify, request, g, Response
from flask_cors import CORS
from prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

APP_NAME = os.getenv("APP_NAME", "portifolio-chat")
APP_VERSION = os.getenv("APP_VERSION", "0.1.0")
APP_ENV = os.getenv("APP_ENV", "production")
CORS_ORIGINS = [o.strip() for o in os.getenv("CORS_ORIGINS", "*").split(",") if o.strip()]
RATE_LIMIT = os.getenv("RATE_LIMIT", "100/minute")
MAX_BODY_MB = int(os.getenv("MAX_BODY_MB", "10"))

class JsonFormatter(Formatter):
    def format(self, record):
        payload = {
            "app": APP_NAME,
            "version": APP_VERSION,
            "env": APP_ENV,
            "level": record.levelname,
            "msg": record.getMessage(),
        }
        for key in ("request_id", "method", "path", "status", "duration_ms", "client_ip"):
            if hasattr(record, key):
                payload[key] = getattr(record, key)
        return json.dumps(payload, ensure_ascii=False)

handler = StreamHandler()
handler.setFormatter(JsonFormatter())
root = logging.getLogger()
root.handlers.clear()
root.addHandler(handler)
root.setLevel(logging.INFO)
log = logging.getLogger(__name__)

HTTP_REQUESTS = Counter("http_requests_total", "Total HTTP requests", ["method","route","status"])
HTTP_LATENCY  = Histogram("http_request_duration_seconds", "HTTP request duration in seconds",
                          ["method","route"], buckets=(0.005,0.01,0.025,0.05,0.1,0.25,0.5,1,2,5))

def create_app():
    app = Flask(__name__)
    app.config["MAX_CONTENT_LENGTH"] = MAX_BODY_MB * 1024 * 1024

    if CORS_ORIGINS == ["*"]:
        CORS(app)
    else:
        CORS(app, resources={r"/*": {"origins": CORS_ORIGINS}})

    Limiter(app=app, key_func=get_remote_address, default_limits=[RATE_LIMIT], storage_uri="memory://")

    @app.before_request
    def _before():
        g.start_time = time.time()
        g.request_id = request.headers.get("X-Request-ID") or uuid.uuid4().hex

    @app.after_request
    def _after(resp):
        resp.headers["X-Request-ID"] = g.get("request_id","")
        resp.headers["X-Content-Type-Options"] = "nosniff"
        resp.headers["X-Frame-Options"] = "DENY"
        resp.headers["Referrer-Policy"] = "no-referrer"
        resp.headers.setdefault("Content-Security-Policy", "default-src 'none'")

        route = (request.url_rule.rule if request.url_rule else request.path) or "unknown"
        method = request.method
        status = resp.status_code
        HTTP_REQUESTS.labels(method=method, route=route, status=status).inc()
        dur = time.time() - g.get("start_time", time.time())
        HTTP_LATENCY.labels(method=method, route=route).observe(dur)

        rec = logging.LogRecord(name=log.name, level=logging.INFO, pathname=__file__, lineno=0,
                                msg="request", args=(), exc_info=None)
        rec.request_id = g.get("request_id")
        rec.method = method
        rec.path = route
        rec.status = status
        rec.duration_ms = int(dur*1000)
        rec.client_ip = get_remote_address()
        root.handle(rec)
        return resp

    @app.get("/")
    def root_route():
        return jsonify(message=f"{APP_NAME} API is running", status="ok", version=APP_VERSION)

    @app.get("/status")
    def status():
        return jsonify(app=APP_NAME, version=APP_VERSION, health="healthy", env=APP_ENV)

    @app.get("/metrics")
    def metrics():
        return Response(generate_latest(), mimetype=CONTENT_TYPE_LATEST)

    OPENAPI = {
        "openapi":"3.0.0",
        "info":{"title":f"{APP_NAME} API","version":APP_VERSION},
        "paths":{
            "/status":{"get":{"summary":"API status","responses":{"200":{"description":"OK"}}}},
            "/metrics":{"get":{"summary":"Prometheus metrics","responses":{"200":{"description":"OK"}}}},
        }
    }

    @app.get("/openapi.json")
    def openapi():
        return jsonify(OPENAPI)

    @app.get("/docs")
    def docs():
        html = f"""<!doctype html><html><head><meta charset='utf-8'/>
<title>{APP_NAME} Docs</title>
<link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist/swagger-ui.css"></head>
<body><div id="swagger-ui"></div>
<script src="https://unpkg.com/swagger-ui-dist/swagger-ui-bundle.js"></script>
<script>window.ui=SwaggerUIBundle({{url:'/openapi.json',dom_id:'#swagger-ui'}});</script>
</body></html>"""
        return Response(html, mimetype="text/html")

    return app

app = create_app()
cat > requirements.txt <<'REQ'
Flask==3.0.3
gunicorn==22.0.0
Flask-Cors==4.0.1
prometheus-client==0.20.0
Flask-Limiter==3.6.0
REQ
sed -i 's#CMD \[.*gunicorn.*#CMD ["gunicorn","-w","2","-b","0.0.0.0:8000","--timeout","30","--graceful-timeout","30","wsgi:app"]#' Dockerfile
cimport os
from flask import Flask, jsonify
from flask_cors import CORS

def create_app():
    app = Flask(__name__)
    CORS(app)

    @app.get("/")
    def root():
        return jsonify(message="portifolio-chat API (package layout) is running", status="ok")

    @app.get("/status")
    def status():
        return jsonify(app="portifolio-chat", version=os.getenv("APP_VERSION","0.1.0"), health="healthy")

    return app

# Instância padrão para wsgi:app
app = create_app()
