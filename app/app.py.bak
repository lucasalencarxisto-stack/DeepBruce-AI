# ============================ Imports / Importações / Importaciones / 导入 ============================
import os, json
from pathlib import Path
from flask import Flask, request, jsonify, render_template
from dotenv import load_dotenv

# OpenAI (carregado apenas no modo real) / only used in real mode / solo en modo real / 仅在真实模式使用
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

# ============================ Paths & .env (ROOT) / Caminhos & .env (RAIZ) / Rutas & .env (RAÍZ) / 路径与 .env（项目根） ============================
# PT: Detecta a raiz do projeto (pasta acima de app/) para localizar templates, static e .env
# EN: Detect project root (one level above app/) to locate templates, static and .env
# ES: Detecta la raíz del proyecto (una carpeta arriba de app/) para ubicar templates, static y .env
# 中: 识别项目根目录（位于 app/ 之上），以定位 templates、static 与 .env
ROOT_DIR = Path(__file__).resolve().parents[1]
DOTENV_PATH = ROOT_DIR / ".env"

# PT: Carrega variáveis do .env da RAIZ (override=True ajuda em dev)
# EN: Load env vars from ROOT .env (override=True helps in dev)
# ES: Carga variables desde .env en la RAÍZ (override=True útil en dev)
# 中: 从根目录加载 .env（override=True 便于开发）
load_dotenv(dotenv_path=DOTENV_PATH, override=True, verbose=True)

# ============================ Flags / Sinalizadores / Señales / 标志 ============================
# PT: Quando = "1", não chama OpenAI e responde local (útil para testar UI)
# EN: When "1", skip OpenAI and reply locally (great for UI testing)
# ES: Cuando es "1", no llama a OpenAI y responde localmente (ideal para probar UI)
# 中: 当为 "1" 时，不调用 OpenAI，本地回显（便于调试界面）
USE_FAKE_AI = (os.getenv("USE_FAKE_AI") or "0").strip() == "1"

# PT: Credenciais OpenAI (só necessárias se USE_FAKE_AI=0)
# EN: OpenAI credentials (needed only if USE_FAKE_AI=0)
# ES: Credenciales de OpenAI (solo necesarias si USE_FAKE_AI=0)
# 中: OpenAI 凭证（仅在 USE_FAKE_AI=0 时需要）
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OPENAI_ORG_ID  = os.getenv("OPENAI_ORG_ID")
OPENAI_PROJECT = os.getenv("OPENAI_PROJECT")

# ============================ Flask App (templates/static na RAIZ) / en ROOT / 在项目根 ============================
# PT: Aponta para templates/ e static/ da raiz do projeto
# EN: Point to project-root templates/ and static/
# ES: Apunta a templates/ y static/ en la raíz
# 中: 指向项目根目录的 templates/ 与 static/
app = Flask(
    __name__,
    template_folder=str(ROOT_DIR / "templates"),
    static_folder=str(ROOT_DIR / "static"),
)

# PT: Em dev, desabilita cache de templates
# EN: Disable template cache in dev
# ES: Desactiva la caché de plantillas en dev
# 中: 开发环境禁用模板缓存
app.jinja_env.cache = {}

# ============================ OpenAI Client (lazy) / Cliente (perezoso) / 客户端（延迟创建） ============================
# PT: Só cria cliente se não for modo fake e houver chave
# EN: Only create client if not fake mode and key exists
# ES: Solo crea cliente si no es modo fake y hay clave
# 中: 仅在非假模式且存在密钥时创建客户端
def get_openai():
    if USE_FAKE_AI:
        return None
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY ausente e USE_FAKE_AI=0")
    if OpenAI is None:
        raise RuntimeError("Biblioteca openai não disponível")
    return OpenAI(
        api_key=OPENAI_API_KEY,
        organization=OPENAI_ORG_ID or None,
        project=OPENAI_PROJECT or None,
    )

# ===== Rota principal da interface =====
@app.route("/")
def home():
    return render_template("index.html")

# ============================ Routes / Rotas / Rutas / 路由 ============================

# ---------- UI ----------
# PT: Rota principal — renderiza a interface (templates/index.html)
# EN: Main route — renders the interface
# ES: Ruta principal — renderiza la interfaz
# 中: 主页路由 — 渲染界面
@app.get("/")
def index():
    return render_template("index.html")

# ---------- Health ----------
# PT: Healthcheck simples p/ monitoramento / smoke test
# EN: Simple healthcheck for monitoring / smoke test
# ES: Comprobación simple de salud
# 中: 简单健康检查
@app.get("/health")
def health():
    return jsonify(ok=True, service="OQS_step2", fake=USE_FAKE_AI)

# ---------- Chat API ----------
# PT: Endpoint principal de chat (consumido pelo frontend via fetch)
# EN: Main chat endpoint (consumed by frontend via fetch)
# ES: Endpoint principal de chat (usado por el frontend con fetch)
# 中: 主要聊天接口（前端通过 fetch 调用）
@app.post("/chat")
def chat():
    data = request.get_json(silent=True) or {}
    user_msg = (data.get("message") or "").strip()

    # PT: Validação mínima
    # EN: Minimal validation
    # ES: Validación mínima
    # 中: 最小校验
    if not user_msg:
        return jsonify(success=False, error="Mensagem vazia / Empty message / Mensaje vacío / 空消息"), 400

    # PT: Modo fake — responde local (não consome API)
    # EN: Fake mode — local reply (no API usage)
    # ES: Modo fake — respuesta local (no usa API)
    # 中: 假模式 — 本地响应（不调用 API）
    if USE_FAKE_AI:
        reply = f"[FAKE] Você disse: {user_msg}"
        return jsonify(success=True, reply=reply)

    # PT: Modo real — chama OpenAI
    # EN: Real mode — call OpenAI
    # ES: Modo real — llama a OpenAI
    # 中: 真模式 — 调用 OpenAI
    try:
        client = get_openai()
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Você é um assistente útil."},
                {"role": "user",   "content": user_msg},
            ],
            temperature=0.7,
        )
        reply = resp.choices[0].message.content
        return jsonify(success=True, reply=reply)
    except Exception as e:
        # PT: Falha amigável
        # EN: Friendly failure
        # ES: Error amigable
        # 中: 友好错误信息
        return jsonify(success=False, error=f"Falha OpenAI: {e}"), 500

# ============================ Main / Principal / Principal / 主函数 ============================
if __name__ == "__main__":
    # PT: Porta via env (padrão 8000) + host 0.0.0.0 p/ acesso externo
    # EN: Port from env (default 8000) + host 0.0.0.0 for external access
    # ES: Puerto por env (por defecto 8000) + host 0.0.0.0 para acceso externo
    # 中: 端口来自环境变量（默认 8000），0.0.0.0 便于外部访问
    port = int(os.getenv("PORT", 8000))
    app.run(host="0.0.0.0", port=port, debug=True)
